import{_ as s,c as e,o as a,a as n}from"./app.bca8d31d.js";const A=JSON.parse('{"title":"Limitations","description":"","frontmatter":{},"headers":[{"level":2,"title":"References are not persisted","slug":"references-are-not-persisted","link":"#references-are-not-persisted","children":[]},{"level":2,"title":"Non-primitive types are not persisted","slug":"non-primitive-types-are-not-persisted","link":"#non-primitive-types-are-not-persisted","children":[]},{"level":2,"title":"Storage must be synchronous","slug":"storage-must-be-synchronous","link":"#storage-must-be-synchronous","children":[]}],"relativePath":"guide/limitations.md","lastUpdated":1669480098000}'),o={name:"guide/limitations.md"},t=n(`<h1 id="limitations" tabindex="-1">Limitations <a class="header-anchor" href="#limitations" aria-hidden="true">#</a></h1><p>While the plugin offers a lot of flexibility and functionality, there are some limitations that should be considered.</p><h2 id="references-are-not-persisted" tabindex="-1">References are not persisted <a class="header-anchor" href="#references-are-not-persisted" aria-hidden="true">#</a></h2><p>Due to serialization process, references are lost on refresh.<br> Consider the following:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">a</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#CB7676;">  </span><span style="color:#4C9A91;">1</span><span style="color:#666666;">:</span><span style="color:#CB7676;"> </span><span style="color:#C98A7DAA;">&#39;</span><span style="color:#C98A7D;">one</span><span style="color:#C98A7DAA;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#CB7676;">  </span><span style="color:#4C9A91;">2</span><span style="color:#666666;">:</span><span style="color:#CB7676;"> </span><span style="color:#C98A7DAA;">&#39;</span><span style="color:#C98A7D;">two</span><span style="color:#C98A7DAA;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#CB7676;">  </span><span style="color:#666666;">...</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">b</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">a</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">a</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#2F798A;">1</span><span style="color:#999999;">:</span><span style="color:#AB5959;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">one</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#2F798A;">2</span><span style="color:#999999;">:</span><span style="color:#AB5959;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">two</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#999999;">...</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">b</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">a</span></span>
<span class="line"></span></code></pre></div><p>Before serialization, <code>a</code> and <code>b</code> point to the same object:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#BD976A;">a</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">b</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">-&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#B07D48;">a</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">b</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">-&gt;</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span></span>
<span class="line"></span></code></pre></div><p>After deserialization, <code>a</code> and <code>b</code> are two different objects with the same content:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#BD976A;">a</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">b</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">-&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">false</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#B07D48;">a</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">b</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">-&gt;</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span></span>
<span class="line"></span></code></pre></div><p>As a consequence, reactivity between <code>a</code> and <code>b</code> is lost.</p><div class="tip custom-block"><p class="custom-block-title">Workaround</p><p>To get around this, you can exclude either <code>a</code> or <code>b</code> from being persisted (using the <a href="/pinia-plugin-persistedstate-v2/guide/config.html#paths"><code>paths</code></a> option) and use the <a href="/pinia-plugin-persistedstate-v2/guide/config.html#afterrestore"><code>afterRestore</code></a> hook to re-populate them after hydration. That way <code>a</code> and <code>b</code> have the same refence again and reactivity is restored.</p></div><h2 id="non-primitive-types-are-not-persisted" tabindex="-1">Non-primitive types are not persisted <a class="header-anchor" href="#non-primitive-types-are-not-persisted" aria-hidden="true">#</a></h2><p>Due to the serialization process, non-primitive types such as <code>Date</code> are not rehydrated as <code>Date</code> object but as <code>string</code> instead.</p><div class="tip custom-block"><p class="custom-block-title">Workaround</p><p>To get around this you can:</p><ul><li>Use the <a href="/pinia-plugin-persistedstate-v2/guide/config.html#afterrestore"><code>afterRestore</code></a> hook to recreate the objects after rehydration.</li><li>Use a custom <a href="/pinia-plugin-persistedstate-v2/guide/config.html#serializer"><code>serializer</code></a> that supports the data types you want to persist.</li></ul></div><h2 id="storage-must-be-synchronous" tabindex="-1">Storage must be synchronous <a class="header-anchor" href="#storage-must-be-synchronous" aria-hidden="true">#</a></h2><p>When providing a custom <a href="/pinia-plugin-persistedstate-v2/guide/config.html#storage"><code>storage</code></a>, its methods must be synchronous. This is due to Pinia&#39;s state subscription (<a href="https://pinia.vuejs.org/core-concepts/state#subscribing-to-the-state" target="_blank" rel="noreferrer"><code>$subscribe</code></a>) being synchronous (like mutations).</p><div class="tip custom-block"><p class="custom-block-title">Workaround</p><p>To add asynchronous behavior (such as using async storages), you can try <a href="https://pinia.vuejs.org/core-concepts/actions.html#subscribing-to-actions" target="_blank" rel="noreferrer">subscribing to actions (<code>$onAction</code>)</a>.</p></div>`,17),p=[t];function l(r,c,i,d,y,h){return a(),e("div",null,p)}const g=s(o,[["render",l]]);export{A as __pageData,g as default};
